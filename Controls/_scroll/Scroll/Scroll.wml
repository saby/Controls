<ws:template name="content">
   <Controls._scroll.Scroll.Watcher scope="{{_options}}" name="scrollWatcher">
      <Controls.event:Register name="scrollDetect" register="scroll">
         <!--Реализация области блоков требует наличия следующей структуры: controls-BlockLayout_theme-{{_options.theme}} > controls-BlockLayout__blockGroup.
         Добавляем класс controls-BlockLayout__blockGroup, для того чтобы была соблюдена структура, когда используется controls-BlockLayout_theme-{{_options.theme}} на контейнере.
         Таким образом мы избавляемся от лишней вложенности.
         Контейнер с классом controls-BlockLayout_theme-{{_options.theme}} имеет несколько дочерних элементов. Из них только контент должен быть группой в
         соответствии с блочной структурой. Набор групп определяется для каждого типа тега отдельно.
         Поэтому тег контента должен отличаться от остальных. Например подойдет span.
         https://wi.sbis.ru/doc/platform/developmentapl/interface-development/controls/content-managment/containers/blocks/-->
         <span name="content"
              style="{{_displayState.heightFix ? '' : _contentStyles}}"
              class="controls-Scroll__content controls-BlockLayout__blockGroup_theme-{{_options.theme}}
                        {{_useNativeScrollbar && _options.scrollbarVisible ? '' : 'controls-Scroll__content_hideNativeScrollbar'}}
                        {{_displayState.hasScroll ? 'controls-Scroll__content_possibleScroll'}}
                        {{_useNativeScrollbar ? _options.scrollMode === 'verticalHorizontal' ? 'controls-Scroll__scroll_verticalHorizontal' :
                         'controls-Scroll__content_auto' : _displayState.heightFix || _contentStyles === undefined ? 'controls-Scroll__content_hidden' :
                         _classTypeScroll}}
                        {{_overflowScrolling ? 'controls-Scroll__content-overflowScrolling'}}"
              on:controlResize="_resizeHandler()"
              on:scroll="_scrollHandler()">
            <ws:partial template="{{_options.content}}"
                        scope="{{_options}}"
                        attr:class="controls-Scroll__userContent"
                        on:selectedKeysChanged="selectedKeysChanged()"
                        on:excludedKeysChanged="excludedKeysChanged()"
                        on:itemClick="itemClick()"
                        on:itemMouseDown="_tmplNotify('itemMouseDown')"
                        on:rootChanged="_tmplNotify('rootChanged')"
                        on:expandedItemsChanged="_tmplNotify('expandedItemsChanged')"
                        on:collapsedItemsChanged="_tmplNotify('collapsedItemsChanged')"
                        on:checkboxClick="_tmplNotify('checkboxClick')"
                        on:markedKeyChanged="_tmplNotify('markedKeyChanged')"
                        on:actionClick="_tmplNotify('actionClick')"
                        on:editArrowClick="_tmplNotify('editArrowClick')"
                        on:navigationParamsChanged="_tmplNotify('navigationParamsChanged')"
                     />
         </span>
      </Controls.event:Register>
   </Controls._scroll.Scroll.Watcher>
</ws:template>

<ws:template name="scrollTpl">
<div class="controls-Scroll ws-flexbox ws-flex-column" on:keydown="_keydownHandler()">
      <!--
      Временно перенес обработчики событий стики хедера и интерсекшен обсервера с partial контента.
      Если в шаблоне контента есть несколько корневых нод, то обработчики не срабатывают и атрибуты не навешиваются.
      Раньше эти обработчики висели на хоке который оборачивал контент. После того как избавились от хоков и
      перенесли ообработчики на контент, всплыли эти проблемы. На сколько я помню как минимум атрибуты(классы)
      вешалиись на ноды если в шаблоне было несколько корневых нод. Проблема еще в том, что на паршале контента
      всегда висело много других обработчиков. Очень странно что пролемы с ними еше не стрельнули.
      Так живем как минимум с 4100. Пернес сюда обработчики всех событий которые всплывают.
      https://online.sbis.ru/opendoc.html?guid=10a3ac25-9b67-4b76-9706-ba8e73415246
      -->
      <ws:partial template="content"
                  attr:class="{{_pagingState.visible ? 'controls-Scroll__content_paging'}}"
                  on:scrollMove="_scrollMoveHandler()"
                  on:intersectionObserverRegister="_intersectionObserverRegisterHandler()"
                  on:intersectionObserverUnregister="_intersectionObserverUnregisterHandler()"
                  on:fixed="_stickyFixedHandler()"
                  on:stickyRegister="_stickyRegisterHandler()"
                  on:saveScrollPosition="_saveScrollPosition()"
                  on:groupStickyHeaders="_groupStickyHeadersHandler()"
                  on:scrollToElement="_scrollToElement()"
                  on:updatePlaceholdersSize="_updatePlaceholdersSize()"
                  on:restoreScrollPosition="_restoreScrollPosition()"
                  on:updateShadowMode="_updateShadowMode()"/>

   <ws:if data="{{_scrollbarVisibility()}}">
      <Controls._scroll.Scroll.Scrollbar
         name="scrollBar"
         contentSize="{{_displayState.contentHeight}}"
         getParentScrollPosition="{{_getScrollPositionCallback}}"
         attr:class="controls-Scroll__scrollbar {{!_dragging ? 'controls-Scroll__scrollbar_hidden'}}
         {{_horizontalScrollbarVisibility() ? 'controls-VScrollbar_vertical_offset'}}"
         on:positionChanged="_positionChangedHandler()"
         on:draggingChanged="_draggingChangedHandler()"
         attr:style="{{_scrollbarStyles}}"/>
   </ws:if>
   <ws:if data="{{_displayState.shadowEnable.top}}">
      <div class="controls-Scroll__shadow controls-Scroll__shadow_horizontal controls-Scroll__shadow_top {{!_shadowVisible('top') ? ' ws-invisible'}}"></div>
   </ws:if>
   <ws:if data="{{_displayState.shadowEnable.bottom}}">
      <div class="controls-Scroll__shadow controls-Scroll__shadow_horizontal controls-Scroll__shadow_bottom {{!_shadowVisible('bottom') ? ' ws-invisible'}}"></div>
   </ws:if>
   <ws:if data="{{_horizontalScrollbarVisibility()}}">
      <Controls._scroll.Scroll.Scrollbar
              position="{{_scrollLeft}}"
              direction="horizontal"
              name="horizontalScrollBar"
              contentSize="{{_displayState.contentWidth}}"
              thumbStyle="accented"
              thumbThickness="l"
              attr:class="controls-Scroll__scrollbar controls-ScrollContainer__scrollbar_horizontal {{!_dragging ? 'controls-Scroll__scrollbar_hidden'}}
              {{_scrollbarVisibility() ? 'controls-VScrollbar_horizontal_offset'}}"
              on:positionChanged="_horizontalPositionChangedHandler()"
              on:draggingChanged="_horizontalDraggingChangedHandler()"
              attr:style="{{_scrollbarStyles}}"/>
   </ws:if>
   <ws:if data="{{_displayState.shadowEnable.left}}">
      <div class="controls-Scroll__shadow controls-Scroll__shadow_vertical controls-Scroll__shadow_left {{!_verticalShadowVisible('left') ? ' ws-invisible'}}"></div>
   </ws:if>
   <ws:if data="{{_displayState.shadowEnable.right}}">
      <div class="controls-Scroll__shadow controls-Scroll__shadow_vertical controls-Scroll__shadow_right {{!_verticalShadowVisible('right') ? ' ws-invisible'}}"></div>
   </ws:if>
   <ws:if data="{{_pagingState.visible}}">
      <Controls.Container.Async templateName="Controls/paging:Paging">
         <ws:partial template="{{content.resolvedTemplate}}"
                     class="controls-Scroll__paging"
                     contrastBackground="{{true}}"
                     backwardEnabled="{{_pagingState.stateUp}}"
                     forwardEnabled="{{_pagingState.stateDown}}"
                     on:onArrowClick="_arrowClickHandler()"/>
      </Controls.Container.Async>
   </ws:if>

   <Controls.event:Listener listenAll="{{true}}" event="controlResize" on:controlResize="_resizeHandler()"/>
</div>
</ws:template>

<ws:if data="{{_useNativeScrollbar}}">
<ws:partial template="scrollTpl"/>
</ws:if>
<ws:else>
<ws:partial template="scrollTpl"
            on:mouseenter="_mouseenterHandler()"
            on:mouseleave="_mouseleaveHandler()"
            on:scrollbarTaken="_scrollbarTakenHandler()"
            on:scrollbarReleased="_scrollbarReleasedHandler()"/>
</ws:else>
