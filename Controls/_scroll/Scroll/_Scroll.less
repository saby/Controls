@import "_contentEnvironmentZIndex";

.controls-Scroll {
   position: relative;
   // Таким образом мы скрываем нативный скролл.
   overflow: hidden;
   display: flex;
   flex-direction: column;

   &:hover {
      > .controls-Scroll__scrollbar {
         visibility: visible;
      }
   }
}

// Use "regular" scrolling, where the content immediately ceases to scroll when you remove your finger from the touchscreen.
.controls-Scroll_webkitOverflowScrollingAuto .controls-Scroll__content-overflowScrolling {
   -webkit-overflow-scrolling: auto;
}

.controls-Scroll__content-overflowScrolling {
   // to fix flickering on IOS after opening popup's
   // for example: https://online.sbis.ru/opendoc.html?guid=12dcb776-5968-4495-b800-34e153d90284
   perspective: 1000;
   backface-visibility: hidden;
}

// Use momentum-based scrolling, where the content continues to scroll for a while after finishing the scroll gesture and removing your finger from the touchscreen.
.controls-Scroll_webkitOverflowScrollingTouch .controls-Scroll .controls-Scroll__content-overflowScrolling {
   -webkit-overflow-scrolling: touch;
}

.controls-Scroll__scrollbar {
   position: absolute;
   top: 0;
   right: 0;
   bottom: 0;
   z-index: @z-index_Scroll-contentEnvironment;
}

.controls-Scroll__scrollbar_hidden {
   visibility: hidden;
}

.controls-Scroll__content {
   height: 100%;
   flex-grow: 1;
   display: flex;
   max-height: inherit;
   flex-direction: column;

   //We enable the contents of the scrollContainer to be displayed on top of the scrollbar and shadows by specifying a z-index greater than them.
   z-index: auto;
}

.controls-Scroll__userContent {
   flex-shrink: 0;
}

/**
 * Данный модификатор предназначен для ускорения работы во время прокрутки.
 * Вешать его следует только на контейнер, который по нашему предположению должен скролиться.
 * В противном случае это вызовет тормоза вместо оптимизации.
 * Подробнее https://developer.mozilla.org/ru/docs/Web/CSS/will-change.
 */
.controls-Scroll__content_possibleScroll:hover {
   will-change: scroll-position;
}

.controls-Scroll__shadow {
   left: 0;
   right: 0;
   z-index: @z-index_Scroll-contentEnvironment;
   position: absolute;
   pointer-events: none;
   height: @height-gradient_Scroll-shadow;
}

.controls-Scroll__shadow-safari13 {
   left: 0;
   z-index: @z-index_Scroll-contentEnvironment;
   position: absolute;
   pointer-events: none;
   height: @height-gradient_Scroll-shadow;
}
.controls-Scroll__shadow_top {
   top: 0;
   background: linear-gradient(
      to bottom,
      @start-color-gradient_Scroll-shadow, @end-color-gradient_Scroll-shadow
   );
}

.controls-Scroll__shadow_bottom {
   bottom: 0;
   background: linear-gradient(
      to top,
      @start-color-gradient_Scroll-shadow, @end-color-gradient_Scroll-shadow
   );
}

.controls-Scroll__content_hideNativeScrollbar::-webkit-scrollbar {
   width: 0px;
   // It's Magic. Only these two styles together allows to hide the scroll on the iPad.
   -webkit-appearance: none;
   display: none;
}

.controls-Scroll__content_scroll {
   overflow-y: scroll;
   overflow-x: hidden;
}

.controls-Scroll__content_auto {
   overflow-y: auto;
   // If the width of the container lying in the scroll container is equal to the width of the scroll of the container,
   // but one of its children climbs beyond this width, then on some platforms(iPad) this is taken into account when
   // calculating the scrollWidth. Turn off scrolling horizontally.
   overflow-x: hidden;
}

.controls-Scroll__content_hidden {
   overflow: hidden;
}

.controls-Scroll__paging {
   position: absolute;
   bottom: 0;
   right: 0;
   z-index: @z-index_Scroll-contentEnvironment;
   border-top: @border-width_BaseControl-scrollPaging-top solid @border-color_BaseControl-scrollPaging;
}

.controls-Scroll__content_paging::after {
   padding-bottom: @height_Paging-button;
   content: '';
   display: block;
}
