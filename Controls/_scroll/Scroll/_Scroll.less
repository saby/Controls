@import "_contentEnvironmentZIndex";

// Use "regular" scrolling, where the content immediately ceases to scroll when you remove your finger from the touchscreen.
.controls-Scroll_webkitOverflowScrollingAuto .controls-Scroll__content-overflowScrolling {
   -webkit-overflow-scrolling: auto;
}

.controls-Scroll__content-overflowScrolling {
   // to fix flickering on IOS after opening popup's
   // for example: https://online.sbis.ru/opendoc.html?guid=12dcb776-5968-4495-b800-34e153d90284
   backface-visibility: hidden;
}

// Use momentum-based scrolling, where the content continues to scroll for a while after finishing the scroll gesture and removing your finger from the touchscreen.
.controls-Scroll_webkitOverflowScrollingTouch .controls-Scroll .controls-Scroll__content-overflowScrolling {
   -webkit-overflow-scrolling: touch;
}

.controls-VScrollbar_vertical {
   position: absolute;
   top: 0;
   right: 0;
   bottom: 0;
   z-index: @z-index_Scroll-contentEnvironment;
}

.controls-ScrollContainer__scrollbar_horizontal {
   position: absolute;
   left: 0;
   right: 0;
   bottom: 0;
   z-index: @z-index_Scroll-contentEnvironment;
}

.controls-Scroll__scrollbar_hidden {
   visibility: hidden;
}

.controls-Scroll__userContent {
   flex-shrink: 0;
}

/**
 * Данный модификатор предназначен для ускорения работы во время прокрутки.
 * Вешать его следует только на контейнер, который по нашему предположению должен скролиться.
 * В противном случае это вызовет тормоза вместо оптимизации.
 * Подробнее https://developer.mozilla.org/ru/docs/Web/CSS/will-change.
 */

.controls-Scroll__content_possibleScroll:hover {
   will-change: scroll-position;
}

.controls-Scroll__shadow {
   z-index: @z-index_Scroll-contentEnvironment;
   position: absolute;
   pointer-events: none;
}

.controls-Scroll__shadow_horizontal {
   left: 0;
   right: 0;
   height: @shadow_thickness_scroll;
}

.controls-Scroll__shadow_vertical {
   top: 0;
   bottom: 0;
   width: @shadow_thickness_scroll;
}

.controls-Scroll__shadow_top {
   top: 0;
   background: linear-gradient(
      to bottom,
      @shadow_start-color_scroll, @shadow_end-color_scroll
   );
}

.controls-Scroll__shadow_bottom {
   bottom: 0;
   background: linear-gradient(
      to top,
      @shadow_start-color_scroll, @shadow_end-color_scroll
   );
}

.controls-Scroll__shadow_left {
   left: 0;
   background: linear-gradient(
           to right,
           @shadow_start-color_scroll, @shadow_end-color_scroll
   );
}

.controls-Scroll__shadow_right {
   right: 0;
   background: linear-gradient(
           to left,
           @shadow_start-color_scroll, @shadow_end-color_scroll
   );
}

.controls-Scroll__content_hideNativeScrollbar::-webkit-scrollbar {
   width: 0px;
   // It's Magic. Only these two styles together allows to hide the scroll on the iPad.
   -webkit-appearance: none;
   display: none;
}

.controls-Scroll__scroll_vertical {
   overflow-y: scroll;
   overflow-x: hidden;
}

// Chrome после обновления с 83 до 84 версии по умолчанию стал overflow-anchor: visible, из-за этого происходит
// браузерный подскролл к низу вновь добавляемого контента.
// https://online.sbis.ru/opendoc.html?guid=8673c14b-da6e-444b-86d1-d1a997555bfe
// https://bugs.chromium.org/p/chromium/issues/detail?id=1105785
.ws-is-chrome .controls-Scroll__scroll_vertical {
   overflow-anchor: none;
}

.controls-Scroll__scroll_verticalHorizontal {
   overflow-y: scroll;
   overflow-x: scroll;
}

.controls-Scroll__content_auto {
   overflow-y: auto;
   // If the width of the container lying in the scroll container is equal to the width of the scroll of the container,
   // but one of its children climbs beyond this width, then on some platforms(iPad) this is taken into account when
   // calculating the scrollWidth. Turn off scrolling horizontally.
   overflow-x: hidden;
}

.controls-Scroll__content_hidden {
   overflow: hidden;
}

.controls-Scroll__paging {
   position: absolute;
   z-index: @z-index_Scroll-contentEnvironment;
   bottom: @scrollpaging_offset-vertical_list;
   right: @scrollpaging_offset-horizontal_list;
}

.controls-Scroll__content_paging::after {
   padding-bottom: @item_height_paging + @padding-vertical_paging * 2;
   content: '';
   display: block;
}
