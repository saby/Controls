<div class="{{ (gridColumn || itemData).getContentClasses(theme, backgroundColorStyle, cursor, highlightOnHover, editable) }}"
     style="{{ (gridColumn || itemData).getContentStyles() }}">

    <ws:partial if="{{ beforeContentTemplate }}"
                template="{{ beforeContentTemplate }}"/>

    <ws:if data="{{ !!contentTemplate }}">
        <!-- Прикладной контент -->
        <ws:partial
                template="{{ contentTemplate }}"
                item="{{ (gridColumn || itemData).getOwner() }}"
                column="{{ (gridColumn || itemData) }}"
                itemData="{{ (gridColumn || itemData) }}"
                gridColumn="{{ (gridColumn || itemData) }}"
                itemActionsTemplate="{{ itemActionsTemplate }}"
                itemActionsClass="{{ itemActionsClass }}"
                ladderWrapper="{{ ladderWrapper }}"
                multiSelectTemplate="{{ multiSelectTemplate }}"
                editArrowTemplate="{{ editArrowTemplate }}"/>

    </ws:if>
    <ws:else>
        <ws:if data="{{ (gridColumn || itemData).config.tooltipProperty }}">
            <Controls.Container.Async templateName="Controls/popup:InfoboxTarget">
                <ws:partial template="{{content.resolvedTemplate}}"
                            attr:class="{{ (gridColumn || itemData).getTooltipOverflowClasses() }}">
                    <ws:content>
                        <ws:if data="{{ (gridColumn || itemData).hasCellContentRender() }}">
                            <!-- Контент по умолчанию, обрезка длинного текста с многоточием -->
                            <div class="{{ (gridColumn || itemData).getTextOverflowClasses() }}">
                                <ws:partial template="{{ (gridColumn || itemData).getCellContentRender() }}"
                                            value="{{ (gridColumn || itemData).getDefaultDisplayValue() }}"
                                            searchValue="{{ (gridColumn || itemData).getSearchValue() }}"
                                            gridColumn="{{(gridColumn || itemData)}}"
                                            scope="{{ (gridColumn || itemData).config }}"/>
                            </div>
                        </ws:if>
                        <ws:else>
                            <!-- Контент по умолчанию -->
                            <div>{{ (gridColumn || itemData).getDefaultDisplayValue() }}</div>
                        </ws:else>
                    </ws:content>
                    <ws:template>
                        <div>{{ (gridColumn || itemData).getTooltip() }}</div>
                    </ws:template>
                </ws:partial>
            </Controls.Container.Async>
        </ws:if>
        <ws:else>
            <ws:if data="{{ (gridColumn || itemData).hasCellContentRender() }}">
                <!-- Контент по умолчанию, обрезка длинного текста с многоточием -->
                <div class="{{ (gridColumn || itemData).getTextOverflowClasses() }}">
                    <ws:partial template="{{(gridColumn || itemData).getCellContentRender()}}"
                                attr:title="{{ (gridColumn || itemData).getTextOverflowTitle() }}"
                                value="{{(gridColumn || itemData).getDefaultDisplayValue()}}"
                                searchValue="{{(gridColumn || itemData).getSearchValue()}}"
                                gridColumn="{{(gridColumn || itemData)}}"
                                scope="{{(gridColumn || itemData).config}}"/>
                </div>
            </ws:if>
            <ws:else>
                <!-- Контент по умолчанию -->
                {{ (gridColumn || itemData).getDefaultDisplayValue() }}
            </ws:else>
        </ws:else>
    </ws:else>

    <ws:partial if="{{ afterContentTemplate }}"
                template="{{ afterContentTemplate }}"
                theme="{{ theme }}"
                tagTemplate="{{ tagTemplate }}"
                tagStyle="{{ tagStyle }}"
                shouldDisplayEditArrow="{{ (gridColumn || itemData).shouldDisplayEditArrow(contentTemplate) }}"
                expanderTemplate="{{ expanderTemplate }}"
                expanderIcon="{{ expanderIcon }}"
                expanderSize="{{ expanderSize }}"/>
</div>
