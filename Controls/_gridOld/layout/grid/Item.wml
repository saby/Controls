<ws:template name="itemActionsTemplateChooser">
   <ws:if data="{{itemData.isSwiped()}}">
      <ws:partial template="{{swipeTemplate}}"
                  itemData="{{itemData}}"
                  itemActionsTemplate="{{itemActionsTemplate}}"
                  itemActionsContainerStyles="{{itemActionsContainerStyles}}"
                  highlightOnHover="{{highlightOnHover}}"
                  attr:class="controls-Grid__itemAction js-controls-ColumnScroll__notDraggable"
                  attr:key="{{itemData.getCurrentColumnKey()}}__actions"
                  theme="{{itemData.theme}}"/>
   </ws:if>
   <ws:else data="{{itemData.itemActionsPosition !== 'custom'}}">
      <ws:partial template="{{itemActionsTemplate}}"
                  itemActionsClass="{{itemActionsClass}}"
                  itemData="{{itemData}}"
                  itemActionsContainerStyles="{{itemActionsContainerStyles}}"
                  highlightOnHover="{{highlightOnHover}}"
                  attr:class="controls-Grid__itemAction js-controls-ColumnScroll__notDraggable"
                  attr:key="{{itemData.getCurrentColumnKey()}}__actions"
                  theme="{{itemData.theme}}"/>
   </ws:else>
</ws:template>

<ws:template name="multiSelectTemplate">
   <ws:partial template="{{multiSelectTpl}}" _preventMergeOptions="{{ !!preventMergeOptions}}">
      <ws:templateOptions item="{{ itemData.dispItem }}" itemData="{{itemData}}"/>
   </ws:partial>
</ws:template>

<ws:template name="COLUMN_CONTENT">
   <!-- Маркер активной записи. Не должен быть выведен в фейковой ячейке лесенки -->
   <ws:if data="{{ !isLadderHeader && (marker !== false && itemData.shouldDisplayMarker(currentColumn.columnIndex)) }}">
      <div class="{{itemData.getMarkerClasses(markerClassName)}}"></div>
   </ws:if>

   <!-- Ячейка с чекбоксом -->
   <ws:if data="{{itemData.hasMultiSelectColumn && currentColumn.columnIndex === 0}}">
      <ws:if data="{{!itemData.isAdd}}">
         <ws:partial template="multiSelectTemplate"/>
      </ws:if>
      <ws:else>
         <div class="{{'controls-Grid__cell_spacingFirstCol_' + itemData.itemPadding.left}}"></div>
      </ws:else>
   </ws:if>
   <!-- Ячейка с данными колонки -->
   <ws:else>
      <ws:if data="{{colspan}}">
         <div class="controls-Grid__row-cell__content_colspaned
                     {{ currentColumn.getColspanedPaddingClassList(currentColumn, colspan).getAll() }}
                     {{!isLadderHeader && currentColumn.hiddenForLadder && !colspan ? 'controls-Grid__row-cell__content_hiddenForLadder controls-background-' + itemData.backgroundStyle + ' controls-Grid__row-cell__content_hiddenForLadder'}}
                     {{!isLadderHeader && itemData.stickyLadder ? 'controls-Grid__row-cell__content_ladderHeader'}}">
            <ws:partial template="{{colspanTemplate}}" itemData="{{itemData}}">
               <ws:multiSelectTemplate>
                  <ws:partial template="multiSelectTemplate" preventMergeOptions="{{ true }}" if="{{ multiSelectPosition === 'custom' }}"/>
               </ws:multiSelectTemplate>
            </ws:partial>
         </div>
      </ws:if>
      <ws:else>
         <ws:partial template="{{currentColumn.template}}"
                     scope="{{currentColumn.column.templateOptions}}"
                     editArrowTemplate="{{editArrowTemplate}}"
                     itemActionsTemplate="{{itemActionsTemplate}}"
                     ladderWrapper="{{currentColumn.ladderWrapper}}"
                     stickyProperty="{{stickyProperty}}"
                     attr:class="{{currentColumn.column.align ? ' controls-Grid__row-cell__content_halign_' + currentColumn.column.align : ''}}
                                 {{!isLadderHeader && currentColumn.hiddenForLadder && !colspan ? 'controls-Grid__row-cell__content_hiddenForLadder controls-background-' + itemData.backgroundStyle + ' controls-Grid__row-cell__content_hiddenForLadder'}}
                                 {{!isLadderHeader && itemData.stickyLadder ? 'controls-Grid__row-cell__content_ladderHeader'}}
                                 {{itemData.stickyLadder && itemData.stickyProperties[1] && !itemData.stickyLadder[itemData.stickyProperties[1]].ladderLength ? 'controls-Grid__row-cell__content_ladder-empty'}}
                                 {{itemData.isAnimatedForSelection() ? ' controls-ListView__item_rightSwipeAnimation'}}
                                 {{currentColumn.column.valign ?' controls-Grid__cell_valign_' + currentColumn.column.valign + ' controls-Grid__cell-content_full-height' : ''}}
                                 {{!!itemData.isDragging ? ' controls-ListView__itemContent_dragging'}}"
                     itemData="{{currentColumn}}"
                     tagTemplate="{{tagTemplate}}">
            <ws:multiSelectTemplate>
               <ws:partial template="multiSelectTemplate" preventMergeOptions="{{ true }}" if="{{ itemData.multiSelectPosition === 'custom' }}"/>
            </ws:multiSelectTemplate>
         </ws:partial>
      </ws:else>
   </ws:else>

   <ws:if data="{{!itemData.columnScroll && itemData.isDrawActions(itemData, currentColumn, colspan)}}">
      <ws:partial template="itemActionsTemplateChooser"/>
   </ws:if>

   <ws:if data="{{ itemData.shouldDisplayDraggingCounter() }}">
      <span class="controls-ListView__item-dragging-counter">{{(item || itemData).getDraggedItemsCount()}}</span>
   </ws:if>
</ws:template>

<ws:template name="STICKY_LADDER_HEADER_CONTENT">
   <Controls.scroll:StickyHeader position="topbottom" backgroundStyle="{{'transparent'}}"
                                 shadowVisibility="hidden"
                                 mode="replaceable">
      <ws:partial template="COLUMN_CONTENT" isLadderHeader="{{ true }}" currentColumn="{{currentColumn}}" ladderWrapperClass="controls-Grid__cell-content-wrapper_ladder" stickyProperty="{{stickyProperty}}" attr:class="{{itemData.getClassesLadderHeading(currentColumn, itemData.theme)}}"/>
   </Controls.scroll:StickyHeader>
</ws:template>

<ws:template name="STICKY_LADDER_HEADER">
   <ws:if data="{{itemData.stickyLadder[stickyProperty].headingStyle && currentColumn.hiddenForLadder}}">
      <div attr:class="controls-Grid__row-ladder-cell
                       {{!!itemData.isActive() ? ' controls-GridView__item_active'}}
                       {{!!itemData.isDragging ? ' controls-ListView__item_dragging'}}
                       {{!!itemData.columnScroll ? currentColumn.classList.columnScroll}}"
           attr:key="{{itemData.key + stickyProperty + '_sticky_ladder'}}"
           attr:style="{{itemData.stickyLadder[stickyProperty].headingStyle}}">

         <ws:if data="{{itemData.stickyProperties[index]}}">
            <ws:if data="{{index === 1}}">
               <div class="controls-Grid__row-additional_ladderWrapper"
                  style="{{ 'right: 0; left: -' + currentColumn.column.width }};">
                  <ws:partial template="STICKY_LADDER_HEADER_CONTENT" attr:class="{{itemData.getAdditionalLadderClasses()}}" attr:style="z-index: 1" currentColumn="{{currentColumn}}" stickyProperty="{{stickyProperty}}"/>
               </div>
            </ws:if>
            <ws:else>
               <div class="controls-Grid__row-main_ladderWrapper"
                  style="{{ 'left: 0; right: -'+ currentColumn.column.width }};">
                  <ws:partial template="STICKY_LADDER_HEADER_CONTENT" attr:style="z-index: {{currentColumn.columnScrollVisibility ? 4 : 2}}" currentColumn="{{currentColumn}}" stickyProperty="{{stickyProperty}}"/>
               </div>
            </ws:else>
         </ws:if>
      </div>
   </ws:if>
</ws:template>

<ws:template name="COLUMN">

   <!-- Первый уровень лесенки -->
   <ws:partial template="STICKY_LADDER_HEADER" if="{{ itemData.stickyProperties[0] }}" currentColumn="{{currentColumn}}" index="{{ 0 }}" stickyProperty="{{itemData.stickyProperties[0]}}"/>

   <!-- Операции над записью в таблице без горизонтального скролла-->
   <ws:if data="{{ itemData.columnScroll && itemData.isDrawActions(itemData, currentColumn, colspan) && itemData.itemActionsDrawPosition === 'before' }}">
      <ws:partial template="itemActionsTemplateChooser" itemActionsContainerStyles="{{currentColumn.gridCellStyles}}"/>
   </ws:if>

   <!-- Заколспаненая запись при горизонтальном скролле разделяется на 2 части: зафиксированную и скроллируемую. -->
   <!-- Данный выводятся в зафиксированной части. ws:for вызовет рендер только первой колонки для заколспанненой записи. -->
   <ws:if data="{{itemData.columnScroll && colspan}}">
      <!-- Зафиксированная часть. -->
      <div class="{{currentColumn.classList.base}} {{currentColumn.classList.columnScroll}} {{itemData.hasMultiSelectColumn && currentColumn.columnIndex === 0 ? currentColumn.classList.padding.getAll()}} {{!!itemData.isActive() && highlightOnHover !== false ? ' controls-GridView__item_active'}}{{!!itemData.isDragging ? ' controls-ListView__item_dragging'}} {{ marker !== false ? currentColumn.classList.marked }}"
           style="{{currentColumn.gridCellStyles}} {{itemData.getCellStyle(itemData, currentColumn, false)}} {{itemData.getColspanForColumnScroll().fixedColumns}}">
         <ws:partial template="COLUMN_CONTENT"/>
      </div>

      <!-- Скроллируемая часть. -->
      <div class="{{currentColumn.classList.base}} {{currentColumn.classList.columnScroll}} {{itemData.hasMultiSelectColumn && currentColumn.columnIndex === 0 ? currentColumn.classList.padding.getAll()}} {{!!itemData.isActive() && highlightOnHover !== false ? ' controls-GridView__item_active'}} {{!!itemData.isDragging ? ' controls-ListView__item_dragging'}} {{ marker !== false ? currentColumn.classList.marked }}"
           style="{{currentColumn.gridCellStyles}} {{itemData.getCellStyle(itemData, currentColumn, false)}} {{itemData.getColspanForColumnScroll().scrollableColumns}}"></div>
   </ws:if>
   <ws:else>
      <div class="{{currentColumn.classList.base}} {{currentColumn.classList.columnScroll}} {{itemData.hasMultiSelectColumn && currentColumn.columnIndex === 0 ? currentColumn.classList.padding.getAll()}} {{!!itemData.isActive() && highlightOnHover !== false ? ' controls-GridView__item_active'}}{{!!itemData.isDragging ? ' controls-ListView__item_dragging'}} {{ marker !== false ? currentColumn.classList.marked }}"
           style="{{currentColumn.gridCellStyles + itemData.getCellStyle(itemData, currentColumn, colspan)}}">
         <ws:partial template="COLUMN_CONTENT"/>
      </div>
   </ws:else>

   <!-- Второй уровень лесенки -->
   <ws:partial template="STICKY_LADDER_HEADER" if="{{ itemData.stickyProperties[1] }}" currentColumn="{{currentColumn}}" index="{{ 1 }}" stickyProperty="{{ itemData.stickyProperties[1] }}"/>

   <!-- Операции над записью в таблице с горизонтальным скроллом -->
   <ws:if data="{{ itemData.columnScroll && itemData.itemActionsDrawPosition === 'after' }}">
      <ws:if data="{{ itemData.isDrawActions(itemData, currentColumn, colspan) }}">
         <ws:partial template="itemActionsTemplateChooser" itemActionsContainerStyles="{{currentColumn.itemActionsGridCellStyles}}"/>
      </ws:if>
      <ws:else data="{{ itemData.isActionsColumn(itemData, currentColumn, colspan || colspanCurrentNode) }}">
         <div attr:key="{{itemData.getCurrentColumnKey()}}__action-cell"></div>
      </ws:else>
   </ws:if>
</ws:template>

<ws:template name="STICKY_COLUMN">
   <ws:if data="{{ itemData.columnScroll && itemData.isDrawActions(itemData, currentColumn, colspan) && itemData.itemActionsDrawPosition === 'before' }}">
      <ws:partial template="itemActionsTemplateChooser" itemActionsContainerStyles="{{itemData.gridCellStyles}}"/>
   </ws:if>
   <!-- сюда попадаем только в случае застиканной записи в мастер или мастер классик, константа стиля находится в itemData.style -->
   <Controls.scroll:StickyHeader position="topbottom" backgroundStyle="{{itemData.style + '_sticked'}}"
                          mode="{{stickyMode}}"
                          shadowVisibility="lastVisible"
                          attr:class="{{currentColumn.classList.base}} {{currentColumn.classList.columnScroll}}
                                      {{itemData.hasMultiSelectColumn && currentColumn.columnIndex === 0 ? currentColumn.classList.padding.getAll()}}
                                      {{!!itemData.isActive() && highlightOnHover !== false ? ' controls-GridView__item_active'}}
                                      {{!!itemData.isDragging ? ' controls-ListView__item_dragging'}}
                                      {{ marker !== false ? currentColumn.classList.marked }}"
                          attr:style="{{currentColumn.gridCellStyles + itemData.getCellStyle(itemData, currentColumn, colspan)}}">
      <ws:partial template="COLUMN_CONTENT"/>
   </Controls.scroll:StickyHeader>
   <ws:if data="{{ itemData.columnScroll && itemData.itemActionsDrawPosition === 'after' }}">
      <ws:if data="{{ itemData.isDrawActions(itemData, currentColumn, colspan) }}">
         <ws:partial template="itemActionsTemplateChooser" itemActionsContainerStyles="{{itemData.itemActionsGridCellStyles}}"/>
      </ws:if>
      <ws:else data="{{ itemData.isActionsColumn(itemData, currentColumn, colspan || colspanCurrentNode) }}">
         <div attr:key="{{itemData.getCurrentColumnKey()}}__action-cell"></div>
      </ws:else>
   </ws:if>
</ws:template>

<ws:if data="{{itemData.isStickedMasterItem}}">
   <Controls.scroll:Group>
      <div class="{{ itemData.getRowClasses(_options) }}">
         <!-- The iterator does not restart when the model changes. Instead, the internal partial is redrawn. We do a reboot forcibly. -->
         <!-- Delete after the task is done https://online.sbis.ru/opendoc.html?guid=13786a2a-54c7-4a09-8fbc-11344cf0804d -->
         {{itemData.resetColumnIndex()}}
         <ws:for data="itemData.resetColumnIndex(); itemData.hasNextColumn(colspan); itemData.goToNextColumn();">
            <ws:partial template="STICKY_COLUMN"
                        stickyMode="stackable"
                        attr:key="{{itemData.getCurrentColumnKey()}}"
                        currentColumn="{{itemData.getCurrentColumn(backgroundColorStyle)}}" attr:class="{{className}}"/>
         </ws:for>
      </div>
   </Controls.scroll:Group>
</ws:if>
<ws:else>
   <div class="{{ itemData.getRowClasses(_options) }}">
      <ws:for data="itemData.resetColumnIndex(); itemData.hasNextColumn(colspan); itemData.goToNextColumn();">
         <ws:partial template="COLUMN" attr:key="{{itemData.getCurrentColumnKey()}}" currentColumn="{{itemData.getCurrentColumn(backgroundColorStyle)}}" attr:class="{{className}}"/>
      </ws:for>
   </div>
</ws:else>
